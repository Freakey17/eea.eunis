<!-- 
 * The VM Systems, Inc. Software License, Version 1.0
 *
 * Copyright (c) 2002 VM Systems, Inc.  All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED PURSUANT TO THE TERMS OF THIS LICENSE.
 * ANY USE, REPRODUCTION, OR DISTRIBUTION OF THE SOFTWARE OR ANY PART
 * THEREOF CONSTITUTES ACCEPTANCE OF THE TERMS AND CONDITIONS HEREOF.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by 
 *        VM Systems, Inc. (http://www.vmguys.com/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "VM Systems" must not be used to endorse or promote products 
 *    derived from this software without prior written permission. For written
 *    permission, please contact info@vmguys.com.
 *
 * 5. VM Systems, Inc. and any other person or entity that creates or
 *    contributes to the creation of any modifications to the original
 *    software specifically disclaims any liability to any person or
 *    entity for claims brought based on infringement of intellectual
 *    property rights or otherwise. No assurances are provided that the
 *    software does not infringe on the property rights of others.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE TITLE
 * AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL VM SYSTEMS, INC.,
 * ITS SHAREHOLDERS, DIRECTORS OR EMPLOYEES BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE. EACH RECIPIENT OR USER IS SOLELY RESPONSIBLE
 * FOR DETERMINING THE APPROPRIATENESS OF USING AND DISTRIBUTING THE SOFTWARE
 * AND ASSUMES ALL RISKS ASSOCIATED WITH ITS EXERCISE OF RIGHTS HEREUNDER,
 * INCLUDING BUT NOT LIMITED TO THE RISKS (INCLUDING COSTS) OF ERRORS,
 * COMPLIANCE WITH APPLICABLE LAWS OR INTERRUPTION OF OPERATIONS.
-->

<!-- DTD for xml files read by org.vmguys.appgen.jrf.EmbeddedGenerator.java
 -->

<!ENTITY % Boolean "(true|false)">

<!ELEMENT Schema (CompositeObject*)>
<!ELEMENT CompositeObject (EmbeddedInfo*,JoinTable*,DomainMethods?,PersistentObjectMethods?)>

<!--

 CompositeObject attributes:

 ATTRIBUTE               DESCRIPTION
 classNameObj            Name of the composite 
                         persistent object class
 classNameDomain         Name of the composite domain class
                         If not present, name will be
                         assumed to be classNameObj+'Domain'
 description             Description of object to go into the javadocs.
 generateHandler         Not supported in EmbeddedGenerator.java.  Sub-classes
                         may use this to generate sub-classes of 
                         net.sf.jrf.util.DomainHandler if desired.
 objInterfaces           Comma-separated list of interfaces implemented by the
                         PersistentObject
 domainInterfaces        Comma-separated list of interfaces implemented by the
                         domain
 lruCacheSize            Size of the LRU cache. Zero, default, denotes no cache.
                         Setting value here will of course override the base
                         class setting, if any.
 cacheAll                If true, the entire set of composites will be cached.
 baseClassNameObj        Name of the PersistentObject super class.                    
 baseIsComposite         If true, base baseClassNameObj is a composite itself.
                         Defaults to false.
 baseClassNameDomain     Name of the domain super class for
                         baseClassNameObj.  If no present
                         name will be assumed to be
                         assumed to be baseClassNameObj+'Domain'
 moduleList              An optional list of modules in which the object belongs.
                         This parameter can then be used to generate only those
                         object belonging to a particular module.  If no modules
                         are listed, it is assumed that the object applies to all
                         modules.
 generateGUI             Not supported by EmbeddedGenerator.java.  Sub-classes may 
                         use to specify whether some sort of GUI
                         entity should be generated (e.g. Struts forms, jsp, etc.)
-->
<!ATTLIST CompositeObject 
  classNameObj           CDATA      #REQUIRED
  classNameDomain        CDATA      #IMPLIED
  description            CDATA      #REQUIRED
  generateHandler        %Boolean;  "false"
  handlerBase            CDATA      #IMPLIED
  objInterfaces          CDATA      #IMPLIED
  domainInterfaces       CDATA      #IMPLIED
  lruCacheSize           CDATA      "0"
  cacheAll               %Boolean;  "false"
  baseClassNameObj       CDATA      #REQUIRED
  baseIsComposite        %Boolean;  "false"
  baseClassNameDomain    CDATA      #IMPLIED
  moduleList             CDATA      #IMPLIED
  generateGUI            %Boolean;  "false">

<!-- You may specify as many methods for both the generated
     domain and the persistent object as you like.  You will have to take
     care about syntax obviously.
     To get the XML parsing to work do:
     <DomainMethods>
     <![CDATA[
               public void myFunction() {
               }
              ]]>
     </DomainMethods>
-->
<!ELEMENT DomainMethods (#PCDATA)>
<!ELEMENT PersistentObjectMethods (#PCDATA)>

<!ELEMENT EmbeddedInfo (JoinFields+)>

<!-- JoinFields, as distinguished from join columns, are the connecting 
     fields between a master and detail table for embeddedInfo objects.

 JoinField  attributes:

 ATTRIBUTE               DESCRIPTION
 parentFieldGetter       Full getter name for the parent's get method
                         name.  For example, parent (master) record
                         has a key field getter getUserId.  This
                         value would be put in parentFieldGetter.
 childFieldName          Name of the child field for the setter.
                         DO NOT include the setter. For the example
                         above, the child record has a field UserId
                         and the resulting value would be "UserId".
 columnSpec              JRF column specification of the childFieldName
                         (e.g. StringColumnSpec).  If you do not 
                         specify the full class path, a prefix will
                         be prepended of "net.sf.jrf.column.columnspecs".
 resultSetGetter         This value is only applicable for constructing
                         an embedded object where the constructObjectType="join"
                         you must specify a complete JRFResultSet() 
                         method to fetch the value. For example, "getint"
                         if the value is a primitive integer.
 columnName              Again, only needed for join construction types.
                         Value should be the exact database column name.
 wrapperType             If you specify wrapper type, it is assumed
                         that the joined value is a primitive.
                         (i.e. the type is a primitive wrapper).          
 -->
<!ELEMENT JoinFields EMPTY>
<!ATTLIST JoinFields 
  parentFieldGetter      CDATA      #REQUIRED
  childFieldName         CDATA      #REQUIRED
  columnSpec             CDATA      #REQUIRED
  resultSetGetter        CDATA      #IMPLIED
  columnName             CDATA      #IMPLIED
  wrapperType            CDATA      #IMPLIED>


<!--
     EmbeddedInfo denotes some embedded detail or related object to 
     a parent or master record.

 EmbeddedInfo  attributes:

 ATTRIBUTE               DESCRIPTION
 classNameObj            Name of the embedded object class.  You may specify primitives here.
 classNameDomain         Name of the embedded domain class.     
                         If not specified, classNameObj"Domain"
                         will be generated.
 fieldName               Field name for accessors; get'fieldName'
                         and 'set'fieldName will be generated.
 description             Description of what the object is.
 see                     Javadoc @see notes to place.
 variableType            Aggregate or base type.  Aggregate type
                         generally matches constructObjectType
                         of query (i.e. master-detail table construction)
 aggregateClassName      if 'aggregate', name of aggregate class
                         (ArrayList, HashMap, etc.).
                         if not present, default is 
                         java.util.ArrayList.
 aggregateRowHandler     Name of the row handling class
                         for aggregates.   Default is:
                         "net.sf.jrf.rowhandler.ApplicationRowHandlerList"
 rowHandlerNeedsDomain   If 'true', a single argument Domain constructor
                         exists for the handler. Default is 'false'.
 iteratorGet             The actual iterator "get" method call for aggregate
                         class (see default value below).
 constructObjectContext  Construct object context. Default is 'eachrow'
 constructObjectType     Type of construct object: query or join.
                         query implies a master-detail relationship where
                         one or more records will be attached to the 
                         master table. A "byjoin" type means that
                         you will be specifying "resultSetGetter" and
                         "columnName" in the joinField entity to create
                         the embedde object.  A simple example would be
                         a user record that a user identifer code and
                         and name at a minimum.  If another table has
                         a user identifer code, you could perform a join
                         (see joins below), fetch the name and construct
                         a "User" object for the composite object.
 whereClause             Specifies the exact where clause to connect 
                         the master to detail.  In future versions,
                         this parameter may be eliminated.
 orderBy                 Option order by clause for detail records.

                              
     
-->
<!ATTLIST EmbeddedInfo 
  classNameObj              CDATA              #REQUIRED
  classNameDomain           CDATA              #IMPLIED
  fieldName                 CDATA              #REQUIRED
  description               CDATA              #REQUIRED
  see                       CDATA              #IMPLIED
  variableType              (base|aggregate)   "aggregate"
  aggregateClassName        CDATA              "java.util.ArrayList"
  aggregateReturnClassName  CDATA              "java.util.List"
  aggregateRowHandler       CDATA              "net.sf.jrf.rowhandlers.ApplicationRowHandlerList"
  rowHandlerNeedsDomain     %Boolean;          "false"
  iteratorGet               CDATA              ".iterator()"     
  constructObjectContext    (eachrow|allrows)  "eachrow"
  constructObjectType       (query|byjoin)     "query"
  whereClause               CDATA              #REQUIRED
  orderBy                   CDATA              #IMPLIED>

<!-- JOIN INFO -->
<!ELEMENT JoinTable (JoinColumn*,JoinTable*)>

<!-- Join table
 (As you can see by the definition, you may nest join tables).

 JoinTable  attributes:

 ATTRIBUTE               DESCRIPTION
 tableName               Name of the joining table.
 innerJoin               Inner or outer join (defaults to false).
 mainColumnNames         Comma-separated list of columns from the master table.
 joinColumnNames         Comma separated list of columns from the "join to" table.
    
-->
<!ATTLIST JoinTable 
 tableName                 CDATA               #REQUIRED 
 innerJoin                 %Boolean;           "true"
 mainColumnNames           CDATA               #REQUIRED
 joinColumnNames           CDATA               #REQUIRED>

<!ELEMENT JoinColumn EMPTY>
<!-- Join column
 JoinColumn  attributes:

 ATTRIBUTE               DESCRIPTION
 description             Description of the column placed in javadoc.
 columnName              column name in joined table.
 fieldName               field name in master table.
 joinColumnSpec          Join column specification.
                         (If the value does not have a 
                         full class designation, prefix will be assumed as
                         "net.sf.jrf.join.joincolumns").
 fieldClassName          Specify the value returned by JoinColumn.getColumnClass(),
                         (DO NOT SPECIFY PRIMITIVE  see usePrimitives)
                         (This will be fixed in future versions).
 usePrimitives           Useful for primitive types only.          
                         Set this value to false (default is true), 
                         to force the use of primitive wrappers for 
                         PersistentObject attributes 
                         (e.g. "java.lang.Integer" as opposed to "int").
                    
-->
<!ATTLIST JoinColumn 
 description               CDATA               #REQUIRED
 columnName                CDATA               #REQUIRED
 fieldName                 CDATA               #REQUIRED
 joinColumnSpec            CDATA               #REQUIRED
 fieldClassName            CDATA               #IMPLIED
 usePrimitives             %Boolean;           "true">
