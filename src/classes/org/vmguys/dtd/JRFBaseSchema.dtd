<!-- 
 * The VM Systems, Inc. Software License, Version 1.0
 *
 * Copyright (c) 2002 VM Systems, Inc.  All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED PURSUANT TO THE TERMS OF THIS LICENSE.
 * ANY USE, REPRODUCTION, OR DISTRIBUTION OF THE SOFTWARE OR ANY PART
 * THEREOF CONSTITUTES ACCEPTANCE OF THE TERMS AND CONDITIONS HEREOF.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by 
 *        VM Systems, Inc. (http://www.vmguys.com/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "VM Systems" must not be used to endorse or promote products 
 *    derived from this software without prior written permission. For written
 *    permission, please contact info@vmguys.com.
 *
 * 5. VM Systems, Inc. and any other person or entity that creates or
 *    contributes to the creation of any modifications to the original
 *    software specifically disclaims any liability to any person or
 *    entity for claims brought based on infringement of intellectual
 *    property rights or otherwise. No assurances are provided that the
 *    software does not infringe on the property rights of others.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE TITLE
 * AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL VM SYSTEMS, INC.,
 * ITS SHAREHOLDERS, DIRECTORS OR EMPLOYEES BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE. EACH RECIPIENT OR USER IS SOLELY RESPONSIBLE
 * FOR DETERMINING THE APPROPRIATENESS OF USING AND DISTRIBUTING THE SOFTWARE
 * AND ASSUMES ALL RISKS ASSOCIATED WITH ITS EXERCISE OF RIGHTS HEREUNDER,
 * INCLUDING BUT NOT LIMITED TO THE RISKS (INCLUDING COSTS) OF ERRORS,
 * COMPLIANCE WITH APPLICABLE LAWS OR INTERRUPTION OF OPERATIONS.
-->

<!-- DTD for xml files read by org.vmguys.appgen.jrf.BaseGenerator.java
     and org.vmguys.appgen.jrf.GenerateDatabase.java.
 -->

<!-- 
     Attribute comment 'Database metadata' notes:

     All attribute comments marked 'Database metadata'
     are not used by the BaseGenerator or
     by GenerateDatabase.  These attributes are included
     for future capability of generating an XML file 
     using this DTD from the JDBC DatabaseMetaData information, which
     includes these attributes.

-->


<!-- Master schema element 
-->
<!ELEMENT Schema (InterfaceColumns*,Table+)>

<!ENTITY % Boolean "(true|false)">

<!-- Interface columns -->
<!ELEMENT InterfaceColumns (Column+)>
<!--  
     Optional interface columns.  If token "interfaces"
     specifies an "interfaceName", all columns from the interface
     will be added to the table.

     ATTRIBUTE               DESCRIPTION
     interfaceName      name of the interface that should be identical
                        to items listed in table.interfaces.
     javadocColor       optional javadoc color for all method 
                        descriptions of the interface. (defaults to "black").

-->
<!ATTLIST InterfaceColumns 
  interfaceName          CDATA      #REQUIRED
  javadocColor           CDATA      #IMPLIED>


<!ELEMENT Table  (Column+,ForeignKeyConstraint*,Index*)>

<!ELEMENT Column (ListOfValues*)>

<!-- Foreign key constraint.  

 Mandatory to specify multiple column foreign keys.
 Optional if a single column foreign key.  
 See imported, importedFromTable, and importedFromColumns
 under "Column" atrributes below.

 ForeignKeyConstraint Attributes

 ATTRIBUTE               DESCRIPTION
 constraintName          name of the constraint.
 localColumns            comma-separated list of local table columns.
 foreignTable            foreign table name
 foreignColumns          comma-separated list of foreign table columns.


-->
<!ELEMENT ForeignKeyConstraint EMPTY>
<!ATTLIST ForeignKeyConstraint 
  constraintName         CDATA      #REQUIRED
  localColumns           CDATA      #REQUIRED
  foreignTable           CDATA      #REQUIRED
  foreignColumns         CDATA      #REQUIRED>

<!ATTLIST Schema databaseName     CDATA #REQUIRED>
<!ELEMENT Index (IndexColumn+)>

<!-- 
 Index Attributes 
 Used by GenerateDatabase only

 ATTRIBUTE            DESCRIPTION
 name                 index name


-->

<!ATTLIST Index   
  name                   CDATA      #IMPLIED
  type                   CDATA      #IMPLIED
  cardinality            CDATA      #IMPLIED
  isPrimaryKey           %Boolean;  "false"
  ascending              %Boolean;  "true"
  unique                 %Boolean;  "true"
  indexStorageKey        CDATA      #IMPLIED>

<!-- 
 IndexColumn Attributes 
 Used by GenerateDatabase only

 ATTRIBUTE            DESCRIPTION
 name                 column name in table.columns
 position             ordinal position in index.

-->
<!ELEMENT IndexColumn EMPTY>
<!ATTLIST IndexColumn 
  name                   CDATA     #REQUIRED
  position               CDATA     #REQUIRED>

<!-- Optional list of static value constants for a
  given column.  This argument will only apply to 
  table columns with a few given column values.
 -->                 
<!ELEMENT ListOfValues EMPTY>
<!-- 

 ListOfValues attributes

 ATTRIBUTE            DESCRIPTION
 value                value to use that must be a valid
                      java construct (e.g. "new Integer(33)")
-->
<!ATTLIST ListOfValues 
  value                 CDATA      #REQUIRED>


<!-- Table 

 Table Attributes

 ATTRIBUTE            DESCRIPTION
 catalogName         Database metadata (see notes above)
 schemaName          Database metadata (see notes above)
 tableType           Database metadata (see notes above)
 tableName           Name of the table.
 objectName          Object-name     Name of Object to 
                     be used to create PersistentObject and
                     AbstractDomain. If left blank, name
                     will be constructed by 'converting'
                     the table name: underscore characters
                     will be eliminated; any value directly
                     following the underscore will be 
                     capitalized; all other characters will 
                     be converted to lower case.  For example:
                     'MY_TABLE' is converted to 'MyTable'
                     and 'MyTableDomain'
 description:        description of the table/object.
 interfaces:         Interfaces implemented by the PersistentObject
 domainInterfaces    Interfaces implemented by the Domain (usually marker interfaces only)
 lruCache            Sets the size of the LRU (least-recently-used)
                     cache.  If the value is zero (default) no
                     static record cache will exist.  If cacheAll
                     if set to true, lruCache value will be useless.
                     Caching is implemented in a single JVM.  Thus,
                     if the database is consistently updated in other
                     JVMs or in the database layer itself, caching should not
                     be used.
 cacheAll            If true, all records of the object will be cached
                     in the JVM (see lruCache above).
 isLookup            If true, object is a look up entity of some sort.
                     BaseGenerator.java does not use this attribute, but 
                     sub-classes might find is useful.
 lookupKey           Key for the look up (see isLookup documentation above)
 lookupDataType      Data type of the look up (see isLookup documentation above)
 skipGenerate        If true, no code will be generated.  This
                     flag is useful for hand-written PersistentObjects
                     and AbstractDomains where information must be
                     stored in the XML for runnng org.vmguys.appgen.jrf.GenerateDatabase.           
 generateHandler     Not used by BaseGenerator.java 
                     Sub-classes may use this to generate of sub-classes of
                     net.sf.jrf.util.DomainHandler
 handlerBase         Base class of the handler (usually DomainHandler). 
                     (See documentation above on generateHandler)
 pkToString          Not currently supported. 
                     Current no control of the toString() method is provided
                     in BaseGenerator.java. 
                     Future version may evaluate this flag and If true, 
                     the toString() method generated
                     for the bean will only include primary key
                     values as opposed to all values in the table.
 moduleList          An optional comma-separated list of modules in which the table belongs.
                     This parameter can then be used to generate only those
                     tables belonging to a particular module.  If no modules
                     are listed, it is assumed that the table applies to all
                     modules.
 generateGUI         Optional parameter to specify whether some sort of GUI
                     entity should be generated (e.g. Struts forms, jsp, etc.).
                     BaseGenerator.java does not use this parameter.  However,
                     sub-classes may use it if desired.
 
 -->
<!ATTLIST Table     
  catalogName           CDATA        #IMPLIED
  schemaName            CDATA        #IMPLIED
  tableName             CDATA        #REQUIRED
  tableType             CDATA        #IMPLIED
  objectName            CDATA        #IMPLIED
  description           CDATA        #IMPLIED
  interfaces            CDATA        #IMPLIED
  domainInterfaces      CDATA        #IMPLIED
  isLookup              %Boolean;    "false"
  lookupKey             CDATA        #IMPLIED
  lookupDataType        CDATA        #IMPLIED     
  lruCacheSize          CDATA        "0"
  cacheAll              CDATA        "false"
  skipGenerate          %Boolean;    "false"
  generateHandler       %Boolean;    "true"
  handlerBase           CDATA        #IMPLIED
  pkToString            %Boolean;    "false"
  moduleList            CDATA        #IMPLIED
  generateGUI           %Boolean;    "false">

<!-- Information on a specific column used in Table

 Column Attributes

 ATTRIBUTE            DESCRIPTION
 name                 Name of the column.
 objectName           Name of the Java field in order to generate
                      accessor methods. If blank,
                      name will be generated from columnName
                      in the manner of objectName in 'Table' 
                      (see conversion explanation for table's objectName 
                      above). 
 seqName              Optional sequence name, applicable to databases
                      with external sequences (not "internal" to a specific
                      table).  
 position             Database metadata (see notes above)
 type                 Database metadata (see notes above)
 imported             For later use.
 jrfImpl              net.sf.jrf.ColumnSpec implementation 
                      class.  If this argument is not supplied,
                      a value must be supplied for dbType (see below).
 nullable             if true, column may be null.
 unique               If true, column value has be unique.
                      This attribute is usually only applicable
                      to non-primary key fields that must be
                      unique.  It is not necessary to set this
                      value to "true" if IsPrimaryKey is "true".
 size                 Maximum size in bytes of the column.
                      Needs to be set only for SizedColumnSpec
                      sub-classes.
 digits               composite of precison and scale.
                      (Currently not supported - use precision and scale)
 precision            Specify the precision, or 
                      maximum number of digits.  Applicable, 
                      of course, to numeric data types only.
 scale                Specify the scale, or 
                      number of digits to the right of the decimal 
                      point.  Applicable, of course, to numeric 
                      data types only.
 dbType               Alternative way to set jrfImpl. This element
                      will only be examined if jrfImpl has no value.
                      See org.vmguys.appgen.jrf.ColumnXMLEnity for the default
                      values and documentation on how to change the default value list.     
 versionColumn        Database metadata (see notes above)
 description          Description of the column.  This text
                      will be placed javadoc for accessor methods
                      of the bean.  The text should be 
                      constructed so that it will neatly 
                      follow the standard javadoc standard of
                      "Gets ..." and "Sets ..."
 isPrimaryKey         If true, column is a single primary key
                      or part of a compound primary key.  For
                      compound primary key, make sure you specify
                      them in the correct order if you wish to 
                      use createTable() to create your table.
 isSeq                If true, this is a sequenced column.
 optimisticLock       If true, column is an optimistic lock 
                      column.
 imported             If true, column is a single column foreign key.
                      (See ForeignKeyConstraint above)
 importedFromTable    A short hand method of specifying a foreign key constraint for 
                      a single column join.  (See ForeignKeyConstraint above.)
 importedFromColumn   A short hand method of specifying a foreign key constraint for 
                      a single column join.
                      (See ForeignKeyConstraint above)
 descKey              Not used by BaseGenerator.java.  Sub-classes may use
                      to generate description methods for field codes.
 descLookupKey        (See descKey).  A look up identifier key to use
                      for converting a code to a description (see descLookupGetterName
                      below).  
 descLookupGetterName (see descKey and descLookupKey). Getter name for a code.  For example,
                      a table may have a foreign key code for a person's name 
                      identifier.  The generated method name might be "getName()". 
 default              Default value of this column, if any. 
                      The string literal will be passed to 
                      the constructors of the column specification.
                      Be careful what you put here.
 setDefaultInDB       If true, set default in database as well as Java layer. 
                      GenerateDatabase does not currently support this feature.
 minValue             Minimum value allowed in this column,
                      if applicable. (Value must be a "new" Comparable. e.g. new Integer(5))
 maxValue             Maximum value allowed in this column,
                      if applicable. (Value must be a "new" Comparable. e.g. new Integer(55))
 usePrimitives        Useful for primitive types only.          
                      Set this value to false (default is true), 
                      to force the use of primitive wrappers for 
                      PersistentObject attributes 
                      (e.g. "java.lang.Integer" as opposed to "int").
 writeOnce            Set to true if value for column is only written once
                      upon row creation (primary keys are automatically 
                      "write once" columns).
 
-->

<!ATTLIST Column    
  name                  CDATA        #REQUIRED
  objectName            CDATA        #IMPLIED
  jrfImpl               CDATA        #IMPLIED
  position              CDATA        #IMPLIED
  type                  CDATA        #IMPLIED
  nullable              %Boolean;    "false"
  unique                %Boolean;    "false"
  seqName               CDATA        #IMPLIED
  size                  CDATA        "0"
  digits                CDATA        "0"
  precision             CDATA        #IMPLIED
  scale                 CDATA        "0"     
  dbType                CDATA        #IMPLIED
  versionColumn         %Boolean;    "false"
  description           CDATA        #IMPLIED
  isPrimaryKey          %Boolean;    "false"
  isSeq                 %Boolean;    "false"
  optimisticLock        %Boolean;    "false"
  imported              %Boolean;    "false"
  importedFromTable     CDATA        #IMPLIED
  importedFromColumn    CDATA        #IMPLIED
  descKey               %Boolean;    "false"
  descLookupKey         CDATA        #IMPLIED     
  descLookupGetterName  CDATA        #IMPLIED     
  fkseq                 CDATA        #IMPLIED
  default               CDATA        #IMPLIED
  setDefaultInDb        CDATA        #IMPLIED
  minValue              CDATA        #IMPLIED
  maxValue              CDATA        #IMPLIED
  usePrimitives         %Boolean;    "true"
  writeOnce             %Boolean;    "false">


