/*
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License.
 *
 * The Original Code is jRelationalFramework.
 *
 * The Initial Developer of the Original Code is is.com (bought by wamnet.com).
 * Portions created by is.com are Copyright (C) 2000 is.com.
 * All Rights Reserved.
 *
 * Contributor: James Evans (jevans@vmguys.com)
 * Contributor: _____________________________________
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License (the "GPL") or the GNU Lesser General
 * Public license (the "LGPL"), in which case the provisions of the GPL or
 * LGPL are applicable instead of those above.  If you wish to allow use of
 * your version of this file only under the terms of either the GPL or LGPL
 * and not to allow others to use your version of this file under the MPL,
 * indicate your decision by deleting the provisions above and replace them
 * with the notice and other provisions required by either the GPL or LGPL
 * License.  If you do not delete the provisions above, a recipient may use
 * your version of this file under either the MPL or GPL or LGPL License.
 *
 */
package net.sf.jrf.sql;

import java.io.InputStream;
import java.io.Reader;
import java.lang.reflect.*;
import java.math.BigDecimal;
import java.sql.*;
import java.util.*;

import net.sf.jrf.*;
import net.sf.jrf.JRFProperties;
import net.sf.jrf.column.ColumnSpec;
import net.sf.jrf.column.columnspecs.*;
import net.sf.jrf.domain.PersistentObject;

import net.sf.jrf.exceptions.*;
import net.sf.jrf.sqlbuilder.*;
import org.apache.log4j.Category;

/**
 * Sub-class to handle SQL prepared statements with
 * primary keys.
 *
 * @see   net.sf.jrf.column.ColumnSpec
 */
public class JRFPrimaryKeyPreparedStatement extends JRFPreparedStatement {
  /** log4j category for debugging and errors */
  private final static Category LOG = Category.getInstance(JRFPrimaryKeyPreparedStatement.class.getName());
  /** Primary key column specification. * */
  protected ColumnSpec primaryKeyColumnSpec = null;

  /**
   * Flag to let setter know if setting up primary key for an
   * insert statement (must handle implicit insert columns)
   */
  protected boolean forSqlInserts = false;
  private CompoundPrimaryKeyColumnSpec compoundPk = null;

  private Setter setter = null;// Compound or single primary key

  JRFPrimaryKeyPreparedStatement(DataSourceProperties dataSourceProperties) {
    super(dataSourceProperties);
  }

  /**
   * Sets up for processing primary keys by column spec.
   *
   * @param primaryKeyColumnSpec  the primary key column specification.
   */
  protected void setPrimaryKeyColumnSpec(ColumnSpec primaryKeyColumnSpec) {
    this.primaryKeyColumnSpec = primaryKeyColumnSpec;
    if (primaryKeyColumnSpec instanceof CompoundPrimaryKeyColumnSpec) {
      compoundPk = (CompoundPrimaryKeyColumnSpec) primaryKeyColumnSpec;
      setter = new CompoundPkSetter(this);
    } else {
      setter = new SinglePkSetter();
    }
  }

  /**
   * Returns <code>true</code> if column should be skipped because the value
   * is generated by an SQL function (sequence or time stamp).
   *
   * @param isInsert     Description of the Parameter
   * @param aColumnSpec  Description of the Parameter
   * @return             <code>true</code> if column should be skipped.
   */
  protected boolean skipColumn(boolean isInsert, ColumnSpec aColumnSpec) {
    if (aColumnSpec instanceof TimestampColumnSpecDbGen || (
            isInsert && aColumnSpec.isSequencedPrimaryKey() &&
            dataSourceProperties.getDatabasePolicy().getSequenceSupportType()
            != DatabasePolicy.SEQUENCE_SUPPORT_AUTOINCREMENT_EXPLICIT)) {
      return true;
    }
    return false;
  }

  /**
   * Sets prepared SQL values for the primary key.
   *
   * @param idx            starting index for for setting prepared statement values.
   * @param obj            Object, composite or otherwise, to use to set prepared statement value(s).
   * @return               next index value to use for prepared statement sets.
   * @throws SQLException  if a JDBC set parameter method fails.
   */
  protected int setPrimaryKeyPreparedValues(int idx, Object obj)
          throws SQLException {
    return setter.set(idx, obj);
  }

  private class SinglePkSetter implements Setter {
    public int set(int idx, Object obj)
            throws SQLException {
      if (forSqlInserts && skipColumn(true, primaryKeyColumnSpec)) {
        return idx;
      }
      Object value = obj;
      if (obj instanceof PersistentObject) {
        value = primaryKeyColumnSpec.getValueFrom((PersistentObject) obj);
      }
      setPreparedColumnValue(primaryKeyColumnSpec, value, idx);
      return ++idx;
    }
  }

  private class CompoundPkSetter implements Setter {
    JRFPreparedStatement stmt = null;

    CompoundPkSetter(JRFPreparedStatement stmt) {
      this.stmt = stmt;
    }

    public int set(int idx, Object obj)
            throws SQLException {
      return compoundPk.setPreparedColumnValues(stmt, (PersistentObject) obj, idx, forSqlInserts);
    }
  }

  // Speed this process up by using local interfaces.
  private interface Setter {
    public int set(int idx, Object obj)
            throws SQLException;
  }
}

