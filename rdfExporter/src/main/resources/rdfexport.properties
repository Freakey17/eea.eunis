#
# Database parameters
#
driver=com.mysql.jdbc.Driver
database=jdbc:mysql://localhost/eunisimport?autoReconnect=true&useUnicode=true&characterEncoding=utf8
user=databaseuser
password=databaspassword

#
# The prefix for all rdf:abouts and rdf:resources to make them into URLs. Follows xml:base rules.
# It is recommended to end the string with '/'
#
baseurl = http://eunis.eea.europa.eu/

#
# Vocabulary is added as the empty namespace the rdf:RDF element
#
vocabulary=http://eunis.eea.europa.eu/rdf/schema.rdf#

#
# The list of tables for which you have queries. Separated by whitespace.
#
tables = geoscope biogeoregions speciesgroup countrybiogeo countries regions speciespopulation

#
# Some of the columns of the queries will contain references to other
# objects rather than literal values. The following configuration 
# specifies, which columns are references to objects of which type.
# It can also be specified directly in the query.
# The right hand side can be a table name or the empty string.
#
objectproperty.hasReference= references
objectproperty.hasParentScope= geoscope
objectproperty.forBioGeoRegion= biogeoregions
objectproperty.hasBioGeoRegion= countrybiogeo
objectproperty.forCountry= countries
objectproperty.hasCountry= countries
objectproperty.hasSynonym= species
objectproperty.synonymFor= species
objectproperty.hasDesignation= designations

#
# The <table>.class sets the rdf:type. If not specified, the capitalized table name is used.
#
# Attribute tables always have five columns:
# 1. id
# 2. property name
# 3. value
# 4. datatype. Use '->' for references, xsd:integer for integer etc.
# 5. language code
#

designations.class = Designation

geoscope.class = Geoscope
geoscope.query = SELECT id_geoscope as id, \
        IF(id_geoscope_parent=-1,NULL,id_geoscope_parent) AS hasParentScope, \
        IF(id_dc=-1,NULL,id_dc) AS hasReference, area_type \
        FROM chm62edt_geoscope

biogeoregions.class = BioGeoRegion
biogeoregions.query1 = SELECT CODE AS id, \
        CODE_EEA AS codeEEA, \
        NAME AS areaName, \
        CONCAT('http://rdfdata.eionet.europa.eu/eea/biogeographic-regions/',RIGHT(CODE_EEA,3)) AS 'owl:sameAs->' \
        FROM chm62edt_biogeoregion WHERE CODE_EEA <>'nd'

biogeoregions.query2 = SELECT CODE_BIOGEOREGION AS id, \
        CODE_COUNTRY AS hasCountry \
        FROM chm62edt_country_biogeoregion \
        WHERE CODE_BIOGEOREGION<>'nd'

#
# LINKS FROM COUNTRY TO BIOGEOREGION WITH COVERAGE
#
countrybiogeo.query = SELECT CONCAT(CODE_COUNTRY,':',CODE_BIOGEOREGION) AS id, \
        CODE_BIOGEOREGION AS forBioGeoRegion, \
        CODE_COUNTRY AS forCountry, \
        PERCENT AS coverage \
        FROM chm62edt_country_biogeoregion \
        WHERE CODE_BIOGEOREGION<>'nd'

#
# COUNTRIES
#
countries.class = Country
countries.query1 = SELECT eunis_area_code AS id, \
        eunis_area_code AS eunisAreaCode, \
        area_name AS areaName, \
        area_name_en as 'areaName@en', \
        area_name_fr as 'areaName@fr', \
        iso_2l AS isoCode2, \
        IF(eunis_area_code IS NULL OR ISO_3_WCMC<>ISO_3_WCMC_PARENT OR iso_2l IS NULL, \
        NULL, CONCAT('http://rdfdata.eionet.europa.eu/eea/countries/',eunis_area_code)) AS 'owl:sameAs->', \
        iso_3l AS isoCode3, \
        iso_n, \
        iso_2_wcmc, iso_3_wcmc, iso_3_wcmc_parent, \
        tel_code, areucd, sort_number, country_type, surface, \
        ngo, number_design_area, source, political_status, population, pop_density, capital, \
        currency_code, currency_name, \
        lat_min, lat_max, long_min, long_max, alt_min, alt_max, selection \
        FROM chm62edt_country

countries.query2 =  SELECT CODE_COUNTRY AS id, CONCAT(CODE_COUNTRY,':', \
        CODE_BIOGEOREGION) AS hasBioGeoRegion \
        FROM chm62edt_country_biogeoregion \
        WHERE CODE_BIOGEOREGION<>'nd'

#
# REGIONS
#
regions.class = Region
regions.query = SELECT ID_REGION_CODE AS id, \
        ID_REGION_CODE AS code, \
        IF(DESCRIPTION='NUTS2008', CONCAT('http://ec.europa.eu/eurostat/ramon/rdfdata/nuts2008/',ID_REGION_CODE), NULL) AS 'owl:sameAs->', \
        name, description from chm62edt_region_codes

#
# SITES
#
sites.class = Site
sites.query = SELECT ID_SITE AS id, \
        CONCAT(CONVERT(ID_GEOSCOPE USING utf8),':',ID_DESIGNATION) AS hasDesignation, \
        'http://purl.org/dc/dcmitype/Text' AS 'rdf:type->', \
        ID_SITE AS idSite, \
        respondent, \
        name, \
        manager, \
        COMPLEX_NAME AS complexName, \
        DISTRICT_NAME AS districtName, \
        ownership, \
        history, \
        `character`, \
        description, \
        MANAGEMENT_PLAN AS managementPlan, \
        iucnat, \
        DESIGNATION_DATE AS designationDate, \
        COMPILATION_DATE AS compilationDate, \
        PROPOSED_DATE AS proposedDate, \
        CONFIRMED_DATE AS confirmedDate, \
        UPDATE_DATE AS updateDate, \
        SPA_DATE AS spaDate, \
        SAC_DATE AS sacDate, \
        NATIONAL_CODE AS nationalCode, \
        NATURA_2000, \
        NUTS AS nuts, \
        area, \
        length, \
        ALT_MEAN AS altMean, \
        ALT_MEAN AS 'geo:alt', \
        ALT_MAX AS altMax, \
        ALT_MIN AS altMin, \
        LONGITUDE AS 'geo:long', \
        LATITUDE AS 'geo:lat', \
        CATEGORY AS category, \
        SOURCE_DB AS sourceDb \
	FROM chm62edt_sites
#
# SPECIES
#
species.class = SpeciesSynonym

species.query1 = SELECT ID_SPECIES AS id, SCIENTIFIC_NAME AS binomialName, \
        IF(VALID_NAME = 1,'true','false') AS 'validName^^xsd:boolean', \
        IF(ID_SPECIES_LINK != ID_SPECIES, ID_SPECIES_LINK, NULL) AS synonymFor, \
        TYPE_RELATED_SPECIES AS taxonomicRank, \
        ID_TAXONOMY AS 'taxonomy->taxonomy', \
        'http://purl.org/dc/dcmitype/Text' AS 'rdf:type->', \
        AUTHOR AS 'dwc:scientificNameAuthorship' \
        CONCAT(SCIENTIFIC_NAME,' ',AUTHOR) AS 'dwc:scientificName', \
        GENUS AS 'dwc:genus', \
        ID_GROUP_SPECIES AS 'speciesGroup->speciesgroup', \
        ID_DC AS 'dwc:nameAccordingToID->references', \
        FROM chm62edt_species \
        JOIN chm62edt_nature_object USING (ID_NATURE_OBJECT)

# Synonyms
species.query2 = SELECT ID_SPECIES_LINK AS id, \
        IF(ID_SPECIES_LINK != ID_SPECIES, ID_SPECIES, NULL) AS hasSynonym \
        FROM chm62edt_species ORDER BY ID_SPECIES_LINK

# Sites the species is expected in
species.query3 = SELECT ID_SPECIES AS id, C.ID_SITE AS 'isExpectedIn->sites' \
        FROM chm62edt_species AS A \
        INNER JOIN chm62edt_nature_object_report_type AS B \
        ON A.ID_NATURE_OBJECT = B.ID_NATURE_OBJECT_LINK \
        INNER JOIN chm62edt_sites AS C \
        ON B.ID_NATURE_OBJECT = C.ID_NATURE_OBJECT

# Vernacular names
species.attributetable1 = SELECT ID_SPECIES AS id, 'dwc:vernacularName', VALUE, "", CODE \
        FROM chm62edt_reports \
        JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
        JOIN chm62edt_language ON id_language=id_lookup \
        JOIN chm62edt_report_attributes USING (ID_REPORT_ATTRIBUTES) \
        JOIN chm62edt_species USING (ID_NATURE_OBJECT) \
        WHERE NAME="VERNACULAR_NAME" AND  LOOKUP_TYPE="LANGUAGE"

# Nature object attributes
species.attributetable2 = SELECT ID_SPECIES AS id, NAME, OBJECT, \
        CASE TYPE WHEN 'reference' THEN '->' WHEN '' THEN '' ELSE CONCAT('xsd:',TYPE) END, \
        OBJECTLANG \
        FROM chm62edt_nature_object_attributes \
        JOIN chm62edt_species USING(ID_NATURE_OBJECT) \
        WHERE LEFT(NAME,1) <> '_'

#
# SPECIES GROUPS
#
speciesgroup.class = SpeciesGroup
speciesgroup.query = SELECT ID_GROUP_SPECIES AS id, common_name, scientific_name \
        FROM chm62edt_group_species

#
# SPECIES POPULATIONS
#
speciespopulation.class = SpeciesPopulationObservation
speciespopulation.query = SELECT CRC32(CONCAT(R.ID_NATURE_OBJECT,R.ID_DC,R.ID_GEOSCOPE,R.ID_GEOSCOPE_LINK,R.ID_REPORT_TYPE,R.ID_REPORT_ATTRIBUTES)) AS id, \
        ID_SPECIES AS 'forSpecies->species', \
        R.ID_GEOSCOPE AS 'country->geoscope', \
        R.ID_GEOSCOPE_LINK AS 'biogeoregion->geoscope', \
        R.ID_DC AS 'dcterms:source->references', \
        chm62edt_population_unit.NAME AS unit \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING(ID_REPORT_TYPE) \
        JOIN chm62edt_population_unit ON ID_POPULATION_UNIT=ID_LOOKUP \
        JOIN chm62edt_species USING(ID_NATURE_OBJECT) \
        WHERE LOOKUP_TYPE="POPULATION_UNIT"

speciespopulation.attributetable = SELECT CRC32(CONCAT(R.ID_NATURE_OBJECT,R.ID_DC,R.ID_GEOSCOPE,R.ID_GEOSCOPE_LINK,R.ID_REPORT_TYPE,R.ID_REPORT_ATTRIBUTES)) AS id, \
        LOWER(chm62edt_report_attributes.NAME), \
        value, \
        IF (TYPE='NUMBER' AND VALUE != 'Present', 'xsd:integer', ''), \
        '' \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
        JOIN chm62edt_population_unit ON ID_POPULATION_UNIT=ID_LOOKUP \
        JOIN chm62edt_report_attributes USING (ID_REPORT_ATTRIBUTES) \
        WHERE LOOKUP_TYPE="POPULATION_UNIT"

#===================================
# Lookup types in chm62edt_report_type:
# ABUNDANCE
# ALTITUDE
# CHEMISTRY
# CLIMATE
# CONSERVATION_STATUS
# COVER
# DEPTH
# DISTRIBUTION_STATUS
# EXPOSURE
# FREQUENCIES
# GEOMORPH
# HUMAN_ACTIVITY
# HUMIDITY
# IMPACT
# INFO_QUALITY
# LANGUAGE (vernacular names)
# LEGAL_STATUS

legalrefs.query = SELECT CRC32(CONCAT(R.ID_NATURE_OBJECT,R.ID_DC,R.ID_GEOSCOPE,R.ID_GEOSCOPE_LINK,R.ID_REPORT_TYPE,R.ID_REPORT_ATTRIBUTES)) AS id, \
        ID_SPECIES AS 'forSpecies->species', \
        ID_DC AS 'dcterms:source->references', \
        annex, \
        priority, \
        IF(comment != '',comment,NULL) AS comment \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type AS B ON R.ID_REPORT_TYPE=B.ID_REPORT_TYPE AND B.LOOKUP_TYPE="LEGAL_STATUS" \
        JOIN chm62edt_legal_status ON ID_LEGAL_STATUS=ID_LOOKUP \
        JOIN chm62edt_species USING(ID_NATURE_OBJECT) \

# Legal references
species.query3 = SELECT ID_SPECIES AS id, \
        CRC32(CONCAT(R.ID_NATURE_OBJECT,R.ID_DC,R.ID_GEOSCOPE,R.ID_GEOSCOPE_LINK,R.ID_REPORT_TYPE,R.ID_REPORT_ATTRIBUTES)) AS 'hasLegalReference->legalrefs' \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type AS B ON R.ID_REPORT_TYPE=B.ID_REPORT_TYPE AND B.LOOKUP_TYPE="LEGAL_STATUS" \
        JOIN chm62edt_species USING (ID_NATURE_OBJECT) \
        ORDER BY ID_SPECIES

# LIFE_FORM
# LIGHT_INTENSITY
# POPULATION_UNIT
# REGION_CODE
# SALINITY
# SPATIAL
# SPECIES_RICHNESS
# SPECIES_STATUS
# SUBSTRATE
# TEMPERATURE
# TEMPORAL
# TREND
# USAGE
# WATER

#===================================
#
# TAXONOMY
#
taxonomy.class = Taxon
taxonomy.query = SELECT ID_TAXONOMY AS id, \
        ID_TAXONOMY AS code, \
        level, name, ID_TAXONOMY_LINK AS 'link->taxonomy', \
        ID_TAXONOMY_PARENT AS 'parent->taxonomy', \
        notes, \
        ID_DC AS 'dcterms:source->references' \
        FROM chm62edt_taxonomy

#
# These namespaces are automatically added to the rdf:RDF element
#
xmlns.rdf = http://www.w3.org/1999/02/22-rdf-syntax-ns#
xmlns.rdfs = http://www.w3.org/2000/01/rdf-schema#
xmlns.geo = http://www.w3.org/2003/01/geo/wgs84_pos#
xmlns.owl = http://www.w3.org/2002/07/owl#
xmlns.foaf = http://xmlns.com/foaf/0.1/
xmlns.sioc = http://rdfs.org/sioc/ns#
xmlns.dwc = http://rs.tdwg.org/dwc/terms/
xmlns.dc = http://purl.org/dc/elements/1.1/
xmlns.dcterms = http://purl.org/dc/terms/
xmlns.skos = http://www.w3.org/2004/02/skos/core#
xmlns.xsd = http://www.w3.org/2001/XMLSchema#
xmlns.cc = http://creativecommons.org/ns#


