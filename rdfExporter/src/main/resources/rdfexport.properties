#
# Database parameters
#
driver=com.mysql.jdbc.Driver
database=jdbc:mysql://localhost/eunisimport?autoReconnect=true&useUnicode=true&characterEncoding=utf8
user=databaseuser
password=databaspassword

#
# The prefix for all rdf:abouts and rdf:resources to make them into URLs. Follows xml:base rules.
# It is recommended to end the string with '/'
#
baseurl = http://eunis.eea.europa.eu/

#
# Vocabulary is added as the empty namespace the rdf:RDF element
#
vocabulary=http://eunis.eea.europa.eu/rdf/schema.rdf#

#
# The list of tables for which you have queries. Separated by whitespace.
#
tables = geoscope biogeoregions speciesgroup countrybiogeo countries regions

#
# Some of the columns of the queries will contain references to other
# objects rather than literal values. The following configuration 
# specifies, which columns are references to objects of which type.
# It can also be specified directly in the query.
# The right hand side can be a table name or the empty string.
#
objectproperty.hasReference= references
objectproperty.hasParentScope= 'geoscope
objectproperty.forBioGeoRegion= biogeoregions
objectproperty.hasBioGeoRegion= countrybiogeo
objectproperty.forCountry= countries
objectproperty.hasCountry= countries

#
# The <table>.class sets the rdf:type. If not specified, the capitalized table name is used.
#
biogeoregions = BioGeoRegion
countries.class = Country
designations.class = Designation
documents.class = Document
geoscope.class = Geoscope
regions = Region
site.class = Site
source.class = Source
species.class = SpeciesSynonym
taxon.class = Taxon

geoscope.query = SELECT id_geoscope as id, \
                    IF(id_geoscope_parent=-1,NULL,id_geoscope_parent) AS hasParentScope, \
                    IF(id_dc=-1,NULL,id_dc) AS hasReference, area_type \
                    FROM chm62edt_geoscope

biogeoregions.query1 = SELECT CODE AS id, \
                       CODE_EEA AS codeEEA, \
                       NAME AS areaName, \
                       CONCAT('http://rdfdata.eionet.europa.eu/eea/biogeographic-regions/',RIGHT(CODE_EEA,3)) AS 'owl:sameAs->' \
                       FROM chm62edt_biogeoregion WHERE CODE_EEA <>'nd'
biogeoregions.query2 = SELECT CODE_BIOGEOREGION AS id, \
                       CODE_COUNTRY AS hasCountry \
                       FROM chm62edt_country_biogeoregion \
                       WHERE CODE_BIOGEOREGION<>'nd'


countrybiogeo.query = SELECT CONCAT(CODE_COUNTRY,':',CODE_BIOGEOREGION) AS id, \
                        CODE_BIOGEOREGION AS forBioGeoRegion, \
                        CODE_COUNTRY AS forCountry, \
                        PERCENT AS coverage \
                        FROM chm62edt_country_biogeoregion \
                        WHERE CODE_BIOGEOREGION<>'nd'

regions.query = SELECT ID_REGION_CODE AS id, \
                ID_REGION_CODE AS code, \
                IF(DESCRIPTION='NUTS2008', CONCAT('http://ec.europa.eu/eurostat/ramon/rdfdata/nuts2008/',ID_REGION_CODE), NULL) AS 'owl:sameAs->', \
                name, description from chm62edt_region_codes

countries.query1 = SELECT eunis_area_code AS id, \
                    eunis_area_code AS eunisAreaCode, \
                    area_name AS areaName, \
                    area_name_en as 'areaName@en', \
                    area_name_fr as 'areaName@fr', \
                    iso_2l AS isoCode2, \
                    IF(eunis_area_code IS NULL OR ISO_3_WCMC<>ISO_3_WCMC_PARENT OR iso_2l IS NULL, \
        NULL, CONCAT('http://rdfdata.eionet.europa.eu/eea/countries/',eunis_area_code)) AS 'owl:sameAs->', \
                    iso_3l AS isoCode3, \
                    iso_n, \
                    iso_2_wcmc, iso_3_wcmc, iso_3_wcmc_parent, \
                     tel_code, areucd, sort_number, country_type, surface, \
                    ngo, number_design_area, source, political_status, population, pop_density, capital, \
                    currency_code, currency_name, \
                    lat_min, lat_max, long_min, long_max, alt_min, alt_max, selection \
                    FROM chm62edt_country

countries.query2 =  SELECT CODE_COUNTRY AS id, CONCAT(CODE_COUNTRY,':', \
                    CODE_BIOGEOREGION) AS hasBioGeoRegion \
                    FROM chm62edt_country_biogeoregion \
                    WHERE CODE_BIOGEOREGION<>'nd'

speciesgroup.query = SELECT ID_GROUP_SPECIES AS id, common_name, scientific_name FROM chm62edt_group_species

#
# Attribute tables always have five columns:
# 1. id
# 2. property name
# 3. value
# 4. datatype. Use '->' for references, xsd:integer for integer etc.
# 5. language code
#
species.attributetable = SELECT ID_SPECIES AS id, NAME, OBJECT, \
                  CASE TYPE WHEN 'reference' THEN '->' WHEN '' THEN '' ELSE CONCAT('xsd:',TYPE) END, \
                  OBJECTLANG \
                  FROM chm62edt_nature_object_attributes \
                  JOIN chm62edt_species USING(ID_NATURE_OBJECT) \
                  WHERE LEFT(NAME,1) <> '_'

taxonomy.query = SELECT ID_TAXONOMY AS id, \
                   ID_TAXONOMY AS code, \
                   level, name, ID_TAXONOMY_LINK AS 'link->taxonomy', \
                   ID_TAXONOMY_PARENT AS 'parent->taxonomy', \
                   notes, \
                   ID_DC AS 'dcterms:source->references' \
                   FROM chm62edt_taxonomy

#
# These namespaces are automatically added to the rdf:RDF element
#
xmlns.rdf = http://www.w3.org/1999/02/22-rdf-syntax-ns#
xmlns.rdfs = http://www.w3.org/2000/01/rdf-schema#
xmlns.geo = http://www.w3.org/2003/01/geo/wgs84_pos#
xmlns.owl = http://www.w3.org/2002/07/owl#
xmlns.foaf = http://xmlns.com/foaf/0.1/
xmlns.sioc = http://rdfs.org/sioc/ns#
xmlns.dwc = http://rs.tdwg.org/dwc/terms/
xmlns.dc = http://purl.org/dc/elements/1.1/
xmlns.dcterms = http://purl.org/dc/terms/
xmlns.skos = http://www.w3.org/2004/02/skos/core#
xmlns.xsd = http://www.w3.org/2001/XMLSchema#
xmlns.cc = http://creativecommons.org/ns#


