#
# Directory where rdfExporter stores generated files
# Path has to be without trailing slash
#
files.dest.dir = ${rdfexporter.files.dest.dir}

#
# The prefix for all rdf:abouts and rdf:resources to make them into URLs. Follows xml:base rules.
# It is recommended to end the string with '/'
#
baseurl = http://eunis.eea.europa.eu/

#
# Vocabulary is added as the empty namespace the rdf:RDF element
#
vocabulary=http://eunis.eea.europa.eu/rdf/schema.rdf#

#
# The list of tables for which you have queries. Separated by whitespace.
#
tables = geoscope biogeoregions legalrefs speciesgroup countrybiogeo countries \
    images regions speciespopulation sites species habitats designations \
    taxonomy references eunishabitats regioncoverage

#
# Some of the columns of the queries will contain references to other
# objects rather than literal values. The following configuration
# specifies, which columns are references to objects of which type.
# It can also be specified directly in the query.
# The right hand side can be a table name or the empty string.
#
objectproperty.hasReference = references
objectproperty.hasParentScope = geoscope
objectproperty.geoCoverage = geoscope
objectproperty.hasBioGeoRegion = biogeoregions
objectproperty.hasCountryBioGeoRegion = countrybiogeo
objectproperty.forCountry = countries
objectproperty.hasCountry = countries
objectproperty.inCountry = countries
objectproperty.hasSynonym = species
objectproperty.synonymFor = species
objectproperty.hasSpecies = species
objectproperty.eunisPrimaryName = species
objectproperty.typicalSpecies = species
objectproperty.hasDesignation = designations
objectproperty.coverageOfSite = sites
objectproperty.isExpectedIn = sites
objectproperty.inRegion = regions
objectproperty.regionCoverage = regioncoverage
objectproperty.hasLegalReference = legalrefs

class = bibo:Document
query = SELECT NULL AS 'id', \
  'EUNIS RDF file' AS 'rdfs:label', \
  'SÃ¸ren Roug' AS 'dcterms:creator', \
  'http://creativecommons.org/licenses/by/2.5/dk/' AS 'dcterms:licence->'

#
# The <table>.class sets the rdf:type. If not specified, the capitalized table name is used.
#
# Attribute tables always have five columns:
# 1. id
# 2. property name
# 3. value
# 4. datatype. Use '->' for references, xsd:integer for integer etc.
# 5. language code
#

#
# BIOGEOGRAPHICAL REGIONS
#
biogeoregions.class = BioGeoRegion
biogeoregions.query1 = SELECT CODE AS id, \
        CODE_EEA AS codeEEA, \
        NAME AS areaName, \
        CONCAT('http://rdfdata.eionet.europa.eu/eea/biogeographic-regions/',RIGHT(CODE_EEA,3)) AS 'owl:sameAs->' \
        FROM chm62edt_biogeoregion WHERE CODE_EEA <>'nd'

biogeoregions.query2 = SELECT CODE_BIOGEOREGION AS id, \
        CODE_COUNTRY AS hasCountry \
        FROM chm62edt_country_biogeoregion \
        WHERE CODE_BIOGEOREGION<>'nd'

#
# LINKS FROM COUNTRY TO BIOGEOREGION WITH COVERAGE
#
countrybiogeo.class = rdf:Description
countrybiogeo.query = SELECT CONCAT(CODE_COUNTRY,':',CODE_BIOGEOREGION) AS id, \
        CODE_BIOGEOREGION AS hasBioGeoRegion, \
        CODE_COUNTRY AS forCountry, \
        PERCENT AS coverage \
        FROM chm62edt_country_biogeoregion \
        WHERE CODE_BIOGEOREGION<>'nd'

#
# COUNTRIES
#
countries.class = Country
countries.query1 = SELECT eunis_area_code AS id, \
        eunis_area_code AS eunisAreaCode, \
        area_name AS areaName, \
        area_name_en AS 'rdfs:label', \
        area_name_en as 'areaName@en', \
        area_name_fr as 'areaName@fr', \
        iso_2l AS isoCode2, \
        IF(eunis_area_code IS NULL OR ISO_3_WCMC<>ISO_3_WCMC_PARENT OR iso_2l IS NULL OR selection = 0, \
             NULL, CONCAT('http://rdfdata.eionet.europa.eu/eea/countries/', eunis_area_code)) AS 'owl:sameAs->', \
        iso_3l AS isoCode3, \
        iso_n, \
        iso_2_wcmc, iso_3_wcmc, iso_3_wcmc_parent, \
        tel_code, areucd, \
        sort_number, country_type, \
        surface, \
        ngo, number_design_area, source, political_status, population, pop_density, capital, \
        currency_code, currency_name, \
        lat_min, lat_max, long_min, long_max, alt_min, alt_max, selection \
        FROM chm62edt_country

countries.query2 =  SELECT CODE_COUNTRY AS id, CONCAT(CODE_COUNTRY,':', \
        CODE_BIOGEOREGION) AS hasCountryBioGeoRegion \
        FROM chm62edt_country_biogeoregion \
        WHERE CODE_BIOGEOREGION<>'nd'

#
# DESIGNATIONS
#
designations.class = Designation
designations.query = SELECT CONCAT(CONVERT(ID_GEOSCOPE USING utf8),':',ID_DESIGNATION) AS id, \
        ID_DESIGNATION AS code, \
        ID_GEOSCOPE AS geoCoverage, \
        DESCRIPTION AS 'rdfs:label', \
        NULLIF(ID_DC, -1) AS hasReference, \
        DESCRIPTION AS description, \
        DESCRIPTION_EN AS 'description@en', \
        DESCRIPTION_FR AS 'description@fr', \
        ORIGINAL_DATASOURCE AS 'dcterms:source', \
        IF(CDDA_SITES = 'Y','true','false') AS 'hasCDDASites^^xsd:boolean', \
        TOTAL_AREA AS totalArea, \
        REFERENCE_AREA AS referenceArea, \
        NATIONAL_LAW AS nationalLaw, \
        NATIONAL_CATEGORY AS nationalCategory, \
        NATIONAL_LAW_REFERENCE AS nationalLawReference, \
        NATIONAL_LAW_AGENCY AS nationalLawAgency, \
        DATA_SOURCE AS dataSource, \
        TOTAL_NUMBER AS TotalNumber, \
        REFERENCE_NUMBER AS referenceNumber, \
        REFERENCE_DATE AS referenceDate, \
        REMARK AS remark, \
        REMARK_SOURCE AS remarkSource \
        FROM chm62edt_designations

#
# EUNIS Habitats
# This export was requested by INSPIRE.
#
eunishabitats.class = skos:Concept
eunishabitats.query = SELECT EUNIS_HABITAT_CODE AS id \
        ,EUNIS_HABITAT_CODE AS 'skos:notation' \
        ,SCIENTIFIC_NAME AS 'skos:prefLabel' \
        ,chm62edt_habitat_description.DESCRIPTION AS 'skos:definition' \
        ,ID_HABITAT AS 'owl:sameAs->habitats' \
        FROM chm62edt_habitat \
        LEFT JOIN chm62edt_habitat_description USING(ID_HABITAT) \
        WHERE EUNIS_HABITAT_CODE != '' AND EUNIS_HABITAT_CODE != '-' \
        ORDER BY EUNIS_HABITAT_CODE

#
# GEOSCOPE
#
geoscope.class = Geoscope
geoscope.key = ID_GEOSCOPE
geoscope.query = SELECT ID_GEOSCOPE as id, \
        NULLIF(ID_GEOSCOPE_PARENT, -1) AS hasParentScope, \
        NULLIF(ID_DC, -1) AS hasReference, \
	area_type \
        FROM chm62edt_geoscope

#
# HABITAT TYPES
#
habitats.class = HabitatType
habitats.vocabulary = http://eunis.eea.europa.eu/rdf/habitats-schema.rdf#
habitats.key1 = ID_HABITAT
habitats.query1 = SELECT ID_HABITAT AS id, \
	CONVERT(ID_HABITAT USING utf8) AS code, \
        CONCAT(ID_HABITAT, '/general') AS 'foaf:isPrimaryTopicOf->', \
        SCIENTIFIC_NAME AS name, \
        SCIENTIFIC_NAME AS 'rdfs:label', \
        CODE_2000 AS natura2000Code, \
        CODE_ANNEX1 AS annex1Code, \
        IF(PRIORITY=1, 'true', 'false') AS 'priority^^xsd:boolean', \
        NULLIF(EUNIS_HABITAT_CODE, '') AS habitatCode, \
	IF(EUNIS_HABITAT_CODE IN ('','-'), NULL, EUNIS_HABITAT_CODE) AS 'owl:sameAs->eunishabitats', \
        CLASS_REF AS classRef, \
        CODE_PART_2 AS codePart2, \
        LEVEL AS level, \
        ORIGINALLY_PUBLISHED_CODE AS originallyPublishedCode \
        FROM chm62edt_habitat

habitats.key2 = ID_HABITAT
habitats.query2 = SELECT ID_HABITAT AS id, \
	ID_SPECIES AS typicalSpecies \
	FROM chm62edt_habitat \
	JOIN chm62edt_nature_object_report_type ON chm62edt_habitat.ID_NATURE_OBJECT = chm62edt_nature_object_report_type.ID_NATURE_OBJECT_LINK \
	JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
	JOIN chm62edt_species ON chm62edt_species.ID_NATURE_OBJECT = chm62edt_nature_object_report_type.ID_NATURE_OBJECT \
	WHERE LOOKUP_TYPE="SPECIES_STATUS"

habitats.attributekey1 = ID_HABITAT
habitats.attributetable1 = SELECT ID_HABITAT AS id, \
        'description', DESCRIPTION, NULL, CODE, \
        'hasReference', ID_DC, NULL, NULL, \
        'comment', OWNER_TEXT, '', 'en' \
        FROM chm62edt_habitat_description \
        JOIN chm62edt_language USING(ID_LANGUAGE)

habitats.attributekey2 = ID_HABITAT
habitats.attributetable2 = SELECT ID_HABITAT AS id, \
	'nationalName', INTERNATIONAL_NAME, '', CODE \
	FROM chm62edt_habitat_international_name \
        JOIN chm62edt_language USING(ID_LANGUAGE)

habitats.attributekey3 = ID_HABITAT
habitats.attributetable3 = SELECT ID_HABITAT AS id, \
	IF(RELATION_TYPE='P','hasParent','hasAncestor'), ID_HABITAT_LINK, '->habitats', NULL \
	FROM chm62edt_habitat_habitat
#
# IMAGES
#
images.class = foaf:Image
images.query = SELECT CONCAT(LOWER(NATURE_OBJECT_TYPE),'/',FILE_NAME) AS id, \
        NAME AS 'dcterms:title', \
	CONCAT(LOWER(NATURE_OBJECT_TYPE),'/',ID_OBJECT) AS 'foaf:depicts->', \
        DESCRIPTION AS 'dcterms:description', \
        SOURCE AS 'dcterms:creator', \
        SOURCE_URL AS 'dcterms:source', \
        LICENSE AS 'dcterms:license' \
        FROM chm62edt_nature_object_picture \
        WHERE MAIN_PIC = 0 AND LICENSE IN ('CC BY','CC BY-SA','CC BY-ND','CC BY-NC','CC BY-NC-SA','CC BY-NC-ND','Public domain')

#
# LEGAL STATUSES
#
legalrefs.class = rdf:Description
legalrefs.query = SELECT CRC32(CONCAT(R.ID_NATURE_OBJECT,R.ID_DC,R.ID_GEOSCOPE,R.ID_GEOSCOPE_LINK,R.ID_REPORT_TYPE,R.ID_REPORT_ATTRIBUTES)) AS id, \
        ID_SPECIES AS 'forSpecies->species', \
        ID_DC AS 'dcterms:source->references', \
        annex, \
        priority, \
        NULLIF(comment, '') AS comment \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type AS B ON R.ID_REPORT_TYPE=B.ID_REPORT_TYPE AND B.LOOKUP_TYPE="LEGAL_STATUS" \
        JOIN chm62edt_legal_status ON ID_LEGAL_STATUS=ID_LOOKUP \
        JOIN chm62edt_species USING(ID_NATURE_OBJECT)

#
# REGIONS
#
regions.class = Region
regions.query = SELECT ID_REGION_CODE AS id, \
        ID_REGION_CODE AS code, \
        IF(LEFT(DESCRIPTION,4)='NUTS', CONCAT('http://rdfdata.eionet.europa.eu/ramon/nuts/',ID_REGION_CODE), NULL) AS 'owl:sameAs->', \
        name, \
        name AS 'rdfs:label', \
        description \
	FROM chm62edt_region_codes

#
# SITES
#
sites.class = Site
sites.vocabulary = http://eunis.eea.europa.eu/rdf/sites-schema.rdf#

sites.key1 = ID_SITE
sites.query1 = SELECT ID_SITE AS id, \
        CONCAT(CONVERT(ID_GEOSCOPE USING utf8),':',ID_DESIGNATION) AS hasDesignation, \
        CONCAT(ID_SITE, '/general') AS 'foaf:isPrimaryTopicOf->', \
        ID_SITE AS idSite, \
        respondent, \
        NAME AS 'rdfs:label', \
        name, \
        manager, \
        NULLIF(COMPLEX_NAME, '') AS complexName, \
        NULLIF(DISTRICT_NAME, '') AS districtName, \
        NULLIF(OWNERSHIP, '') AS ownership, \
        history, \
        NULLIF(`CHARACTER`, '') AS `character`, \
        NULLIF(DESCRIPTION,'') AS description, \
        NULLIF(MANAGEMENT_PLAN, '') AS managementPlan, \
        NULLIF(IUCNAT, '') AS iucnat, \
        DESIGNATION_DATE AS designationDate, \
        NULLIF(COMPILATION_DATE, '') AS compilationDate, \
        PROPOSED_DATE AS proposedDate, \
        CONFIRMED_DATE AS confirmedDate, \
        NULLIF(UPDATE_DATE, '') AS updateDate, \
        SPA_DATE AS spaDate, \
        SAC_DATE AS sacDate, \
        NATIONAL_CODE AS nationalCode, \
        NATURA_2000, \
        NULLIF(NUTS, 'Multi') AS nutsCode, \
        NULLIF(NUTS, 'Multi') AS 'inNutsRegion->http://rdfdata.eionet.europa.eu/ramon/nuts', \
        area, \
        length, \
        ALT_MEAN AS altMean, \
        ALT_MEAN AS 'geo:alt', \
        ALT_MAX AS altMax, \
        ALT_MIN AS altMin, \
        LONGITUDE AS 'geo:long', \
        LATITUDE AS 'geo:lat', \
        CATEGORY AS category, \
        SOURCE_DB AS sourceDb \
	FROM chm62edt_sites


# Biographical regions
sites.key2 = ID_SITE
sites.query2 = SELECT ID_SITE AS id, \
        chm62edt_biogeoregion.CODE AS hasBioGeoRegion \
        FROM chm62edt_sites \
        JOIN chm62edt_reports USING(id_nature_object) \
        JOIN chm62edt_biogeoregion ON chm62edt_reports.id_geoscope_link = chm62edt_biogeoregion.id_geoscope \
        WHERE id_geoscope_link != -1

sites.key3 = ID_SITE
sites.query3 = SELECT ID_SITE AS id, \
        CONCAT(ID_SITE, '-', ID_LOOKUP) AS regionCoverage \
        FROM chm62edt_sites \
        JOIN chm62edt_nature_object_report_type USING (ID_NATURE_OBJECT) \
        JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
        JOIN chm62edt_report_attributes USING(ID_REPORT_ATTRIBUTES) \
        WHERE LOOKUP_TYPE="REGION_CODE"

# Country
sites.key4 = ID_SITE
sites.query4 = SELECT ID_SITE AS id, \
        EUNIS_AREA_CODE AS inCountry \
        FROM chm62edt_sites \
        JOIN chm62edt_nature_object_geoscope USING (ID_NATURE_OBJECT) \
        JOIN chm62edt_country ON chm62edt_country.ID_GEOSCOPE=chm62edt_nature_object_geoscope.ID_GEOSCOPE

sites.key5 = ID_SITE
sites.query5 = SELECT ID_SITE AS id, \
        C.ID_SPECIES AS hasSpecies \
        FROM chm62edt_sites AS A \
        INNER JOIN chm62edt_nature_object_report_type AS B ON A.ID_NATURE_OBJECT = B.ID_NATURE_OBJECT \
        INNER JOIN chm62edt_species AS C ON B.ID_NATURE_OBJECT_LINK = C.ID_NATURE_OBJECT 

# Nature object links
sites.attributekey1 = ID_SITE
sites.attributetable1 = SELECT ID_SITE AS id, 'foaf:page', LINK,  '->',  '' \
        FROM chm62edt_nature_object_links \
        JOIN chm62edt_sites USING(ID_NATURE_OBJECT) \
	WHERE LINK != '' AND LINK IS NOT NULL \
        ORDER BY ID_NATURE_OBJECT

# Nature object attributes
sites.attributekey2 = ID_SITE
sites.attributetable2 = SELECT ID_SITE AS id, a.NAME, OBJECT, \
        CASE TYPE WHEN 'reference' THEN '->' WHEN '' THEN '' ELSE CONCAT('xsd:',TYPE) END, \
        OBJECTLANG \
        FROM chm62edt_nature_object_attributes AS a \
        JOIN chm62edt_sites USING(ID_NATURE_OBJECT) \
        WHERE LEFT(a.NAME,1) <> '_'
#
# Region coverage
#
regioncoverage.class = RegionCoverage
regioncoverage.query = SELECT CONCAT(ID_SITE, '-', ID_LOOKUP) AS id, \
        ID_LOOKUP AS inRegion, \
        ID_SITE AS coverageOfSite, \
        chm62edt_report_attributes.VALUE AS 'coveragePercent^^xsd:double' \
        FROM chm62edt_sites \
        JOIN chm62edt_nature_object_report_type USING (ID_NATURE_OBJECT) \
        JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
        JOIN chm62edt_report_attributes USING(ID_REPORT_ATTRIBUTES) \
        WHERE LOOKUP_TYPE="REGION_CODE"
#
# SPECIES
#
species.class = SpeciesSynonym
species.vocabulary = http://eunis.eea.europa.eu/rdf/species-schema.rdf#

species.key1 = ID_SPECIES
species.query1 = SELECT ID_SPECIES AS id, \
        ID_SPECIES AS speciesCode, \
        CONCAT(ID_SPECIES, '/general') AS 'foaf:isPrimaryTopicOf->', \
	SCIENTIFIC_NAME AS binomialName, \
        IF(VALID_NAME = 1,'true','false') AS 'validName^^xsd:boolean', \
        ID_SPECIES_LINK AS eunisPrimaryName, \
        IF(ID_SPECIES_LINK != ID_SPECIES, ID_SPECIES_LINK, NULL) AS synonymFor, \
        TYPE_RELATED_SPECIES AS taxonomicRank, \
        ID_TAXONOMY AS 'taxonomy->taxonomy', \
        AUTHOR AS 'dwc:scientificNameAuthorship', \
        SCIENTIFIC_NAME AS 'dwc:scientificName', \
        CONCAT(SCIENTIFIC_NAME,' ',AUTHOR) AS 'rdfs:label', \
        GENUS AS 'dwc:genus', \
        ID_GROUP_SPECIES AS 'speciesGroup->speciesgroup', \
        NULLIF(ID_DC, -1) AS 'dwc:nameAccordingToID->references', \
        IF(IGNORE_ON_MATCH > 0, 'true', 'false') AS 'ignoreOnNameMatch^^xsd:boolean' \
        FROM chm62edt_species \
        JOIN chm62edt_nature_object USING (ID_NATURE_OBJECT)

# Synonyms
species.key2 = ID_SPECIES
species.query2 = SELECT ID_SPECIES_LINK AS id, \
        IF(ID_SPECIES_LINK != ID_SPECIES, ID_SPECIES, NULL) AS hasSynonym \
        FROM chm62edt_species ORDER BY ID_SPECIES_LINK

# Sites the species is expected in
#species.key3 = ID_SPECIES
#species.query3 = SELECT ID_SPECIES AS id, C.ID_SITE AS isExpectedIn \
#        FROM chm62edt_species AS A \
#        INNER JOIN chm62edt_nature_object_report_type AS B \
#        ON A.ID_NATURE_OBJECT = B.ID_NATURE_OBJECT_LINK \
#        INNER JOIN chm62edt_sites AS C \
#        ON B.ID_NATURE_OBJECT = C.ID_NATURE_OBJECT

# Legal references
species.key4 = ID_SPECIES
species.query4 = SELECT ID_SPECIES AS id, \
        CRC32(CONCAT(R.ID_NATURE_OBJECT,R.ID_DC,R.ID_GEOSCOPE,R.ID_GEOSCOPE_LINK,R.ID_REPORT_TYPE,R.ID_REPORT_ATTRIBUTES)) AS hasLegalReference \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type AS B ON R.ID_REPORT_TYPE=B.ID_REPORT_TYPE AND B.LOOKUP_TYPE="LEGAL_STATUS" \
        JOIN chm62edt_species USING (ID_NATURE_OBJECT) \
        ORDER BY ID_SPECIES

# Images
species.key5 = ID_OBJECT
species.query5 = SELECT ID_OBJECT AS id, \
        FILE_NAME AS 'foaf:depiction->images/species' \
        FROM chm62edt_nature_object_picture \
        WHERE NATURE_OBJECT_TYPE='Species' AND MAIN_PIC = 0 AND LICENSE IN ('CC BY','CC BY-SA','CC BY-ND','CC BY-NC','CC BY-NC-SA','CC BY-NC-ND','Public domain') \
        ORDER BY ID_OBJECT

# Vernacular names
species.attributekey1 = ID_SPECIES
species.attributetable1 = SELECT ID_SPECIES AS id, 'dwc:vernacularName', VALUE, "", CODE \
        FROM chm62edt_reports \
        JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
        JOIN chm62edt_language ON id_language=id_lookup \
        JOIN chm62edt_report_attributes USING (ID_REPORT_ATTRIBUTES) \
        JOIN chm62edt_species USING (ID_NATURE_OBJECT) \
        WHERE NAME="VERNACULAR_NAME" AND  LOOKUP_TYPE="LANGUAGE"

# Nature object attributes
species.attributekey2 = ID_SPECIES
species.attributetable2 = SELECT ID_SPECIES AS id, NAME, OBJECT, \
        CASE TYPE WHEN 'reference' THEN '->' WHEN '' THEN '' ELSE CONCAT('xsd:',TYPE) END, \
        OBJECTLANG \
        FROM chm62edt_nature_object_attributes \
        JOIN chm62edt_species USING(ID_NATURE_OBJECT) \
        WHERE LEFT(NAME,1) <> '_'

# Nature object links
species.attributekey3 = ID_SPECIES
species.attributetable3 = SELECT ID_SPECIES AS id, 'foaf:page', LINK,  '->',  '' \
        FROM chm62edt_nature_object_links \
        JOIN chm62edt_species USING(ID_NATURE_OBJECT) \
	WHERE LINK != '' AND LINK IS NOT NULL \
        ORDER BY ID_NATURE_OBJECT

#
# SPECIES GROUPS
#
speciesgroup.class = SpeciesGroup
speciesgroup.query = SELECT ID_GROUP_SPECIES AS id, \
        common_name, \
        common_name AS 'rdfs:label', \
        scientific_name \
        FROM chm62edt_group_species

#
# SPECIES POPULATIONS
#
speciespopulation.class = SpeciesPopulationObservation
speciespopulation.query = SELECT CRC32(CONCAT(R.ID_NATURE_OBJECT,R.ID_DC,R.ID_GEOSCOPE,R.ID_GEOSCOPE_LINK,R.ID_REPORT_TYPE,R.ID_REPORT_ATTRIBUTES)) AS id, \
        ID_SPECIES AS 'forSpecies->species', \
        R.ID_GEOSCOPE AS 'country->geoscope', \
        R.ID_GEOSCOPE_LINK AS 'biogeoregion->geoscope', \
        R.ID_DC AS 'dcterms:source->references', \
        chm62edt_population_unit.NAME AS unit \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING(ID_REPORT_TYPE) \
        JOIN chm62edt_population_unit ON ID_POPULATION_UNIT=ID_LOOKUP \
        JOIN chm62edt_species USING(ID_NATURE_OBJECT) \
        WHERE LOOKUP_TYPE="POPULATION_UNIT"

speciespopulation.attributetable = SELECT CRC32(CONCAT(R.ID_NATURE_OBJECT,R.ID_DC,R.ID_GEOSCOPE,R.ID_GEOSCOPE_LINK,R.ID_REPORT_TYPE,R.ID_REPORT_ATTRIBUTES)) AS id, \
        LOWER(chm62edt_report_attributes.NAME), \
        value, \
        IF (TYPE='NUMBER' AND VALUE != 'Present', 'xsd:integer', ''), \
        '' \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
        JOIN chm62edt_population_unit ON ID_POPULATION_UNIT=ID_LOOKUP \
        JOIN chm62edt_report_attributes USING (ID_REPORT_ATTRIBUTES) \
        WHERE LOOKUP_TYPE="POPULATION_UNIT"

#
# TAXONOMY
#
taxonomy.class = Taxon
taxonomy.vocabulary = http://eunis.eea.europa.eu/rdf/taxonomies-schema.rdf#

taxonomy.query = SELECT ID_TAXONOMY AS id, \
        ID_TAXONOMY AS code, \
        level, name, \
        name AS 'rdfs:label', \
        ID_TAXONOMY_LINK AS 'link->taxonomy', \
        ID_TAXONOMY_PARENT AS 'parent->taxonomy', \
        notes, \
        ID_DC AS 'dcterms:source->references' \
        FROM chm62edt_taxonomy
	
#
# REFERENCES
#
references.class = rdf:Description
references.key = ID_DC
references.query = SELECT ID_DC as id, \
        TITLE AS 'dcterms:title', \
	ALTERNATIVE AS 'dcterms:alternative', \
	SOURCE AS 'dcterms:creator', \
	URL AS 'rdfs:seeAlso->', \
	EDITOR AS 'dcterms:contributor', \
	CREATED AS 'dcterms:created', \
	PUBLISHER AS 'dcterms:publisher' \
        FROM DC_INDEX
	
references.attributekey = ID_DC
references.attributetable = SELECT ID_DC AS id, \
        IF(LOCATE(':',NAME), NAME, CONCAT('dcterms:',NAME)), \
        OBJECT, \
        CASE TYPE WHEN 'reference' THEN '->' WHEN '' THEN '' ELSE CONCAT('xsd:',TYPE) END, \
        OBJECTLANG \
        FROM dc_attributes

#===================================
# Lookup types in chm62edt_report_type:
# ABUNDANCE
# ALTITUDE
# CHEMISTRY
# CLIMATE
# CONSERVATION_STATUS
# COVER
# DEPTH
# DISTRIBUTION_STATUS
# EXPOSURE
# FREQUENCIES
# GEOMORPH
# HUMAN_ACTIVITY
# HUMIDITY
# IMPACT
# INFO_QUALITY
# LANGUAGE (vernacular names)
# LEGAL_STATUS
# LIFE_FORM
# LIGHT_INTENSITY
# POPULATION_UNIT
# REGION_CODE
# SALINITY
# SPATIAL
# SPECIES_RICHNESS
# SPECIES_STATUS
# SUBSTRATE
# TEMPERATURE
# TEMPORAL
# TREND
# USAGE
# WATER

#===================================
#
# These namespaces are automatically added to the rdf:RDF element
#
xmlns.rdf = http://www.w3.org/1999/02/22-rdf-syntax-ns#
xmlns.rdfs = http://www.w3.org/2000/01/rdf-schema#
xmlns.geo = http://www.w3.org/2003/01/geo/wgs84_pos#
xmlns.owl = http://www.w3.org/2002/07/owl#
xmlns.foaf = http://xmlns.com/foaf/0.1/
xmlns.sioc = http://rdfs.org/sioc/ns#
xmlns.dwc = http://rs.tdwg.org/dwc/terms/
xmlns.dc = http://purl.org/dc/elements/1.1/
xmlns.dcterms = http://purl.org/dc/terms/
xmlns.skos = http://www.w3.org/2004/02/skos/core#
xmlns.xsd = http://www.w3.org/2001/XMLSchema#
xmlns.cc = http://creativecommons.org/ns#
xmlns.bibo = http://purl.org/ontology/bibo/

datatype.varchar =
datatype.char =
datatype.nvarchar =
datatype.int = xsd:integer
datatype.datetime = xsd:dateTime
datatype.decimal = xsd:double
datatype.float = xsd:double
datatype.real = xsd:double
