########################################################################
#There are three groups of parameters in this file:
########################################################################
# GROUP 1:
#  AbstractDomain and other default runtime parameters.
#########################################################################
# GROUP 2:
#  Database connection or data source parameters.
#########################################################################
# GROUP 3:
#  SourceGen tool parameters.
#########################################################################
# This file is accessed through com.is.jrf.JRFProperties.
#
# To inform JRFProperties where this file is located, use a JVM parameter of:
# -DjrfPropertiesFile=xyz (the .properties extention is assumed) and place
# xyz.properties somewhere at the base of one of the directories (or jar
# files) in the classpath.  The parameter value could also have a package
# name prefix like: -DjrfProperties=com.is.jrf.xyz (then it would look for
# a file named xyz.properties in the com.is.jrf package).
#
# The HypersonicSQL properties are uncommented so the tests and examples
# can be run out of the box.
#
# For all boolean parameters, case-insensitive entries are allowed.
# You may use "YES" or "TRUE" for true and "NO" or "FALSE" for false.
#########################################################################


#########################################################################
###  GROUP 1 - AbstractDomain and other default runtime parameters.
#########################################################################

#########################################################################
### The following properties may be changed to alter the
#  default behavior of all instantiated AbstractDomain objects.
#########################################################################

#########################################################################
#  Set this paramter to YES/TRUE if your database supports duplicate
# key error codes.  Provided that the database policy method for
# getDuplicateKeyErrorCode() is implemented correctly for the specific
# database, DuplicateRowException will be thrown for duplicate key
# insert statement errors. Typically, "supportValidateUnique" should
# be set to "NO" if duplicate key error codes are supported.
# NOTE: HyperSonicDatabase does not support error codes at all.

supportDuplicateKeyErrorCheck=true

#########################################################################
# supportValidateUnique.  		Default AbstractDomain value: YES
#########################################################################
# Setting this parameter to NO disallows all calls to
# ColumnSpec.validateUnique() in AbstractDomain.  You should usually
# set this value to "NO" if supportDuplicateKeyErrorCheck is set to "YES".

supportValidateUnique=false

#########################################################################
# validateBeforeSaving.  		Default AbstractDomain value: YES
#########################################################################
# Set this value to TRUE if the default behavior of AbstractDomain
# is to validate data before saving.

validateBeforeSaving=true

#########################################################################
# returnSavedObject.  			Default AbstractDomain value: NO
#########################################################################
# Set this value to TRUE/YES if you wish AbstractDomain to re-fetch
# the most recently saved object.  This option is most useful for
# tables with timestamped values. This value MUST be set to true
# to run the JUnit tests successfully.

returnSavedObject=true

#########################################################################
# usePostFind.  				Default AbstractDomain value: YES
#########################################################################
#Setting this parameter to NO/FALSE will disallow all calls
# to postFind() in AbstractDomain.

usePostFind=YES

#########################################################################
# useAutoSetupNewColumnMethodology		Default AbstractDomain value: YES
#########################################################################
# Setting this value to "NO/FALSE" will disallow AbstractDomain from
# using automatic implementation of reflection optimization and
# reflection elimination methodology for column get and set values.

useAutoSetupNewColumnMethodology=NO

#########################################################################
#########################################################################
#########################################################################
##  GROUP 2 - Connection/Data source parameters.
#########################################################################
## It must be clearly understood that an application can have
## no entries in the file at all and rely on constructing a JRFConnection
## handle through it own Properties objects.  See JRFConnectionFactory
## javadoc for more information.
##
## The absolutely critical parameter that must exist in any Properties
## instance used to create a connection or obtain data source properties
## is the database type ('dbtype').  Database connection parameters are
## in the format of 'X.Y', where X is a database type ('dbtype') and
## 'Y' is the parameter (e.g. sybase.driver).  There are five
## categories of information on a DataSource:
##
##  	A.	Policy information - one item: policy class name.
##	B.	Data source behavior parameters - 10 items.
##		See net.sf.jrf.sql.DataSourceProperites javadoc for
##		a description of these parameters.
##	C.	Connection mechanism type - one item: specify 'local'
##		connection or 'jndi'.
##	D.	JNDI  data source connection parameters - three items.
##	E.	Local data source connection parameters - variable number of items.
#########################################################################
## Minimally categories 'A' and 'B'  must be specified.  Database policy
## and DataSource behavior are always required by the framework.
## Any additional parameter requirements are based on the mechanism
## used to obtain a connection:
##
##   1.	Allow an AbstractDomain to use the JRFConnectionFactory class to
##        build a connection from JNDI data source information.
##		Required additional parameters: Categories C and D; conntype='jndi'.
##		If contextFactoryName and providerURL are not provided,
##		a container environment is assumed (java:comp/env).
##
##	2.	Allow an AbstractDomain to use the JRFConnectionFactory to
##		build a connection based on a local DataSource creation
##		mechanism.  Required additional parameters: Categories
##		C and E.  There are two ways to obtain a direct
##		DataSource: 1) Provide parameters for the JRF
##		implementation of javax.sql.PooledConnectionDataSource or
##		2) Implement net.sf.jrf.sql.DataSourceGenerator to
##		instantiate a local DataSource using the parameters that
##		are required for the particular data source. If you
##		have your own local implementation, you must set
##		'localdatasourcegeneratorimpl' to the implementation's
##		class name.
##
##
##	3.	Obtain a DataSource in the application and pass in this
##		DataSource to AbstractDomain() via a call to setDataSource().
##		Required additional parameters: none.  However,
##		the connection properties set for the AbstractDomain must
##		contain the appropriate data source behavior properties.
##

########################################################################
## Currently databases ('dbtype's) supplied below with default values:
## sybase, oracle, hsql, sqlserver, instantdb, postgres, mysql,firebird
########################################################################

dbtype=mysql
#dbtype=firebird


#########################################################################
# For all local data source generation, you may specify
# an implementation of a source generator.
# Left blank, the default is net.sf.jrf.sql.SimpleDataSourceGenerator
#########################################################################

localdatasourcegeneratorimpl=net.sf.jrf.sql.java14.SimpleDataSourceGenerator
#localdatasourcegeneratorimpl=net.sf.jrf.sql.SimpleDataSourceGenerator

#########################################################################
# MySQL
# Example for the open-source MySQL RDBMS# (http://www.mysql.com)
#########################################################################

#########################################################################
## Category A: Policy ---
#########################################################################

mysql.databasePolicy=net.sf.jrf.dbpolicies.MySQLDatabasePolicy


#########################################################################
## Category B: DataSource behavior properties.
#########################################################################

mysql.clobsupport=YES
mysql.blobsupport=YES
mysql.setpreparedcharacterstream=NO
mysql.binaryStreamsSupported=YES
mysql.supportBigDecimal=true
mysql.supportPreparedSetBoolean=false
mysql.reuseStatement=false
mysql.useANSIJoins=true
mysql.transactionsForDropAndCreateSupported=true

## Set the following value to false if not using INODB

mysql.commitAndRollbackSupported=false

## MYSQL-specific parameter to denote use of InnoDB

mysql.useInnoDB=false

#########################################################################
## Category C: Connection Type
#########################################################################

mysql.conntype=local

#########################################################################
## Category D: JNDI data source parameters -- conntype = 'jndi'
#########################################################################

mysql.datasourcename=
mysql.jndiProviderURL=rmi://localhost:1099
mysql.jndiContextFactoryName=com.sun.jndi.rmi.registry.RegistryContextFactory

#########################################################################
## Category E: SimpleDataSource direct connect parameters -- conntype = 'local'
#########################################################################

mysql.dbname=eunis
mysql.driver=com.mysql.jdbc.Driver
mysql.url=jdbc:mysql://192.168.1.41/eunis
mysql.user=charlie
mysql.password=letmein
# Maxpoolsize is to be coordinated with /etc/my.cnf - max_user_connections=40
mysql.maxpoolsize=40
mysql.minpoolsize=1

#########################################################################
##  GROUP 3 - SourceGen properties.
#########################################################################
#########################################################################
## The following are properties needed by the SourceGen tool
# These are in addition to the driver and url properties above.
##########################################################################

SourceGen.outputdir=jrf_src
SourceGen.genPackage=ro.finsiel.eunis
SourceGen.subclassPackage=jrf.generated

# schema limits which tables get generated
SourceGen.schema=SourceGen.PersistSuffix=Gen
SourceGen.DomainSuffix=Domain

# Separate table names with commas
SourceGen.StaticTables=


#####################################################################
# Firebird
#####################################################################
# (http://www.interbase.com)
#####################################################################
#####################################################################
## Category A: Policy ---
#####################################################################
firebird.databasePolicy=net.sf.jrf.dbpolicies.FirebirdDatabasePolicy
#####################################################################
### Category B: DataSource behavior properties.
#####################################################################
firebird.clobsupport=NO
firebird.blobsupport=NO
firebird.clobsupport=YES
firebird.setpreparedcharacterstream=YES
firebird.binaryStreamsSupported=YES
firebird.reuseStatement=false
firebird.useANSIJoins=true
firebird.transactionsForDropAndCreateSupported=true
firebird.commitAndRollbackSupported=NO
#####################################################################
## Category C: Connection Type
#####################################################################
firebird.conntype=local
#####################################################################
## Category D: JNDI data source parameters -- conntype = 'jndi'
#####################################################################
firebird.datasourcename=
firebird.jndiProviderURL=rmi://localhost:1099
firebird.jndiContextFactoryName=com.sun.jndi.rmi.registry.RegistryContextFactory
#####################################################################
## Category E: SimpleDataSource direct connect parameters -- conntype = 'local'
#####################################################################
instantdb.driver=org.enhydra.instantdb.jdbc.idbDriver
firebird.driver=org.firebirdsql.jdbc.FBDriver
firebird.dbname=eunis
firebird.url=jdbc:firebirdsql:localhost/3050:/opt/interbase/examples/eunis.gdb
firebird.user=SYSDBA
firebird.password=masterkey
firebird.maxpoolsize=20
firebird.minpoolsize=1
